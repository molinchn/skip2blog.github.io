(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{429:function(_,v,t){"use strict";t.r(v);var a=t(15),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"mysql的存储-索引-锁以及事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql的存储-索引-锁以及事务"}},[_._v("#")]),_._v(" MySQL的存储，索引，锁以及事务")]),_._v(" "),t("p",[_._v("本文是我对MySQL中几个重点部分的理解与概要，阅读对象是我自己。")]),_._v(" "),t("p",[_._v("对最近MySQL中几个重要内容的概要总结，方便回顾与复习。")]),_._v(" "),t("h2",{attrs:{id:"_0-重要的参考与学习资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-重要的参考与学习资料"}},[_._v("#")]),_._v(" 0. 重要的参考与学习资料")]),_._v(" "),t("p",[_._v("首先是两本书：")]),_._v(" "),t("ul",[t("li",[_._v("《MySQL必知必会》")]),_._v(" "),t("li",[_._v("《MySQL技术内幕 — InnoDB存储引擎》")])]),_._v(" "),t("p",[_._v("接下来是一些博客网站")]),_._v(" "),t("p",[_._v("首先是刚刚发现的宝藏博主的文章，文章非常精湛，配图也很棒。")]),_._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://draveness.me/mysql-innodb/",target:"_blank",rel:"noopener noreferrer"}},[_._v("『浅入浅出』MySQL 和 InnoDB"),t("OutboundLink")],1),_._v("，这个是捋一下大体思路，框架性的内容，十分重要，可以快速对InnoDB的重点进行复习。")]),_._v(" "),t("li",[t("a",{attrs:{href:"https://draveness.me/whys-the-design-mysql-b-plus-tree/",target:"_blank",rel:"noopener noreferrer"}},[_._v("为什么MySQL使用B+树"),t("OutboundLink")],1),_._v("，然后讨论了B+树的一些优势所在，这是一个常被问到的点。")]),_._v(" "),t("li",[t("a",{attrs:{href:"https://draveness.me/mysql-transaction/",target:"_blank",rel:"noopener noreferrer"}},[_._v("『浅入深出』MySQL 中事务的实现"),t("OutboundLink")],1),_._v("，最后是关于事务的实现部分，这部分在《技术内幕》那本书里讲的太详细了，不适合快速学习，可以用作事后钻研。")])]),_._v(" "),t("p",[_._v("然后剩下的因为比较乱，都被我剪到evernote里了，查看「数据库」标签即可。")]),_._v(" "),t("h2",{attrs:{id:"_1-mysql与innodb的架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql与innodb的架构"}},[_._v("#")]),_._v(" 1. MySQL与InnoDB的架构")]),_._v(" "),t("h3",{attrs:{id:"_1-1-「数据库」与「数据库实例」"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-「数据库」与「数据库实例」"}},[_._v("#")]),_._v(" 1.1 「数据库」与「数据库实例」")]),_._v(" "),t("p",[_._v("即database和instance的区别。")]),_._v(" "),t("p",[_._v("「数据库」是物理操作系统文件以及其他数据文件的集合。")]),_._v(" "),t("p",[_._v("「数据库实例」是数据库的后台线程以及共享内存的集合。")]),_._v(" "),t("p",[_._v("一般来说，实例与数据库是一一对应的，实例是操纵数据库的接口，没有实例便无法操作数据库。")]),_._v(" "),t("h3",{attrs:{id:"_1-2-mysql架构-与innodb的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-mysql架构-与innodb的关系"}},[_._v("#")]),_._v(" 1.2 MySQL架构（与InnoDB的关系）")]),_._v(" "),t("p",[_._v("借用"),t("a",{attrs:{href:"https://draveness.me/mysql-innodb/",target:"_blank",rel:"noopener noreferrer"}},[_._v("draveness博客"),t("OutboundLink")],1),_._v("的一张图。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/Draveness/Analyze/master/contents/Database/images/mysql/Logical-View-of-MySQL-Architecture.jpg",alt:"Logical-View-of-MySQL-Architecture"}})]),_._v(" "),t("p",[_._v("数据查询的过程是这样：")]),_._v(" "),t("ol",[t("li",[_._v("连接器：客户端连接数据库")]),_._v(" "),t("li",[_._v("缓存中查找。")]),_._v(" "),t("li",[_._v("若缓存中不存在，则分析解析sql语句")]),_._v(" "),t("li",[_._v("优化器优化sql")]),_._v(" "),t("li",[_._v("利用存储引擎查询")])]),_._v(" "),t("p",[_._v("InnoDB就属于存储引擎查询这一环。")]),_._v(" "),t("h3",{attrs:{id:"_1-3-数据如何存储-分级结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据如何存储-分级结构"}},[_._v("#")]),_._v(" 1.3 数据如何存储（分级结构）")]),_._v(" "),t("p",[_._v("数据的存储是分级的：")]),_._v(" "),t("ol",[t("li",[_._v("表 tablespace 【.frm和.idb的区别】")]),_._v(" "),t("li",[_._v("段 segment")]),_._v(" "),t("li",[_._v("区 extent")]),_._v(" "),t("li",[_._v("页 page 【磁盘的最小操纵和管理单位】")]),_._v(" "),t("li",[_._v("行 row 【数据时按行存储的】")])]),_._v(" "),t("h3",{attrs:{id:"_1-4-表的存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-表的存储"}},[_._v("#")]),_._v(" 1.4 表的存储")]),_._v(" "),t("p",[_._v("表的定义在.frm文件中，表的数据和索引在.idb文件中。")]),_._v(" "),t("p",[_._v(".frm与引擎无关，任何一个平台或引擎都会存储表的定义在这个文件中。")]),_._v(" "),t("p",[_._v("数据也有两部分，一个是共享表空间，用于存放回滚信息，插入缓冲索引页等等数据，为公共区域。")]),_._v(" "),t("p",[_._v("另一部分为每张表的独立空间（需要开启），用于存放数据和索引等。")]),_._v(" "),t("h3",{attrs:{id:"_1-5-页的存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-页的存储"}},[_._v("#")]),_._v(" 1.5 页的存储")]),_._v(" "),t("p",[_._v("页是 InnoDB 存储引擎管理数据的最小磁盘单位。每次查询行或者对行有任何操作，实际上都是把行所在的页读取到缓存汇总并进行操作。")]),_._v(" "),t("h3",{attrs:{id:"_1-6-行的存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-行的存储"}},[_._v("#")]),_._v(" 1.6 行的存储")]),_._v(" "),t("p",[_._v("行有两种存储方式：Compact和Redundant，前者比后者能节省20%的空间。")]),_._v(" "),t("p",[_._v("行数据溢出时，会通过一个指针指向一个溢出页。")]),_._v(" "),t("h2",{attrs:{id:"_2-索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引"}},[_._v("#")]),_._v(" 2. 索引")]),_._v(" "),t("h3",{attrs:{id:"_2-1-索引的目的与存在方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-索引的目的与存在方式"}},[_._v("#")]),_._v(" 2.1 索引的目的与存在方式")]),_._v(" "),t("p",[_._v("索引的目的是为了快速查询。")]),_._v(" "),t("p",[_._v("InnoDB的索引使用B+树来建立，通常非叶子节点存储的都是索引值，叶子存储的是对应"),t("strong",[_._v("行数据（聚集索引）或者主键数据（辅助索引）")]),_._v("。")]),_._v(" "),t("p",[_._v("但是需要注意的是，"),t("strong",[_._v("B+ 树索引并不能找到一个给定键对应的具体值，它只能找到数据行对应的页，然后数据库把整个页读入到内存中，并在内存中查找具体的数据行。")])]),_._v(" "),t("h3",{attrs:{id:"_2-2-innodb为什么使用b-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-innodb为什么使用b-树"}},[_._v("#")]),_._v(" 2.2 InnoDB为什么使用B+树")]),_._v(" "),t("p",[_._v("https://draveness.me/whys-the-design-mysql-b-plus-tree/")]),_._v(" "),t("p",[_._v("主要关注三种索引：哈希索引、B树索引和B+树索引的区别。")]),_._v(" "),t("ol",[t("li",[_._v("为什么"),t("strong",[_._v("不用哈希索引")]),_._v("：哈希索引虽然能提供O(1)的单行操作性能，但是当面对"),t("strong",[_._v("范围查询与排序操作")]),_._v("时，哈希索引无法很好的支持，而且会导致全表扫描。")]),_._v(" "),t("li",[_._v("为什么"),t("strong",[_._v("不用B树")]),_._v("：B树虽然可以不必查找到叶子（可以再非叶子节点存储数据），但是在查询的过程中"),t("strong",[_._v("会有更多的随机IO")]),_._v("，而B+树所有的数据都在叶子结点，而且用指针互相连接，这样一来可以通过顺序遍历查找，减少了随机IO（磁盘读取到内存的次数减少）。")])]),_._v(" "),t("h3",{attrs:{id:"_2-3-聚集索引与辅助索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-聚集索引与辅助索引"}},[_._v("#")]),_._v(" 2.3 聚集索引与辅助索引")]),_._v(" "),t("p",[_._v("首先聚集索引中存放的是（key，行数据），辅助索引存放的是（key，书签）。也就是说使用辅助索引并不能获取全部的行数据，而是得到一个书签，再依据这个书签再次查找（通常是再次在聚集索引中查找）。")]),_._v(" "),t("p",[_._v("聚集索引只有一个，辅助索引可以有多个。")]),_._v(" "),t("h3",{attrs:{id:"_2-4-联合索引与最左前缀匹配原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-联合索引与最左前缀匹配原则"}},[_._v("#")]),_._v(" 2.4 联合索引与最左前缀匹配原则")]),_._v(" "),t("p",[_._v("联合索引是指对多个列进行索引。")]),_._v(" "),t("p",[_._v("联合索引的创建方法和单个索引的创建方法是一致的，不同之处仅在于有多个列。")]),_._v(" "),t("p",[_._v("最左前缀匹配原则，指的是在索引中会从左到右进行匹配，中间不允许中断。")]),_._v(" "),t("p",[_._v("举个例子，有一个表的联合索引为")]),_._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("key")]),_._v(" idx_a_b_c "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),_._v("\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("p",[_._v("在这种情况下，下列情况和对应的联合索引使用情况：")]),_._v(" "),t("ul",[t("li",[_._v("where a == x1 and b == x2 and c == x3;  使用联合索引（这时即使交换了顺序，优化器也会调整回来）")]),_._v(" "),t("li",[_._v("where a == x1 and b == x2;  使用联合索引")]),_._v(" "),t("li",[_._v("where a == x1;  使用联合索引")]),_._v(" "),t("li",[_._v("where b == x2 and c == x3; 不满足最左前缀匹配原则")]),_._v(" "),t("li",[_._v("where b == x2; 不满足最左前缀匹配原则")])]),_._v(" "),t("p",[_._v("需要注意的是，即使不满足最左前缀匹配原则，也可能使用联合索引。这是因为不满足最左前缀匹配的话，可能会引发全表扫描，这时候可能恰好使用的还是联合索引，但是效率就没办法与正常的索引比较了。")]),_._v(" "),t("h3",{attrs:{id:"_2-5-全文检索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-全文检索"}},[_._v("#")]),_._v(" 2.5 全文检索")]),_._v(" "),t("p",[_._v("暂略")]),_._v(" "),t("h3",{attrs:{id:"_2-6-索引的设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-索引的设计"}},[_._v("#")]),_._v(" 2.6 索引的设计")]),_._v(" "),t("p",[_._v("暂略")]),_._v(" "),t("h2",{attrs:{id:"_3-锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-锁"}},[_._v("#")]),_._v(" 3. 锁")]),_._v(" "),t("p",[_._v("说实话，锁和事务这部分我感觉知识碎片化过于严重，因此采用前面提到的"),t("a",{attrs:{href:"https://draveness.me/mysql-innodb/",target:"_blank",rel:"noopener noreferrer"}},[_._v("文章"),t("OutboundLink")],1),_._v("中的脉络，加上自己的理解。")]),_._v(" "),t("h3",{attrs:{id:"_3-1-并发控制机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-并发控制机制"}},[_._v("#")]),_._v(" 3.1 并发控制机制")]),_._v(" "),t("p",[_._v("有两种并发控制机制，即乐观锁和悲观锁：")]),_._v(" "),t("ul",[t("li",[_._v("乐观锁并不是锁，而是一种机制。每次更新数据都假设不会冲突，每次更新完后写回前都会判断原数据是否发生了变化。")]),_._v(" "),t("li",[_._v("悲观锁则是真正的锁，会认为一定会冲突，因此会申请锁。")])]),_._v(" "),t("p",[_._v("当需要非常高的响应速度和并发量时选择乐观锁，当试错成本非常高时则选择悲观锁。")]),_._v(" "),t("h3",{attrs:{id:"_3-2-锁的种类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-锁的种类"}},[_._v("#")]),_._v(" 3.2 锁的种类")]),_._v(" "),t("p",[_._v("锁有两类，即：")]),_._v(" "),t("ul",[t("li",[_._v("共享锁（S）")]),_._v(" "),t("li",[_._v("排他锁（X)")])]),_._v(" "),t("p",[_._v("其中共享锁类似读锁，排他锁类似写锁。前者互相兼容，而后者互不兼容。")]),_._v(" "),t("h3",{attrs:{id:"_3-3-innodb中锁的粒度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-innodb中锁的粒度"}},[_._v("#")]),_._v(" 3.3 InnoDB中锁的粒度")]),_._v(" "),t("p",[_._v("在InnoDB中，锁的粒度比较简单，只分表锁和行锁。")]),_._v(" "),t("p",[_._v("3.2节中说得两种锁指的就是行锁，而表锁称之为"),t("strong",[_._v("意向锁")]),_._v("。")]),_._v(" "),t("p",[_._v("意向锁也分两种，即"),t("strong",[_._v("意向共享锁和意向排他锁")]),_._v("，它们都是表示"),t("strong",[_._v("接下来我们将请求对该表中的某个行上锁")]),_._v("。")]),_._v(" "),t("p",[_._v("**二者是相互兼容的，意向锁不会阻塞除了全表扫描以外的任何请求。**需要注意的是：")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突")]),_._v("。")]),_._v(" "),t("li",[_._v("行级别的X和S按照普通的共享、排他规则即可。")])]),_._v(" "),t("p",[_._v("意向锁的存在会让人觉得莫名其妙，其实它主要是针对表级的XS锁，例如下面这段话的总结：")]),_._v(" "),t("blockquote",[t("p",[_._v("有的人可能会对意向锁的目的并不是完全的理解，我们在这里可以举一个例子：如果没有意向锁，当已经有人使用行锁对表中的某一行进行修改时，如果另外一个请求要对全表进行修改，那么就需要对所有的行是否被锁定进行扫描，在这种情况下，效率是非常低的；不过，在引入意向锁之后，当有人使用行锁对表中的某一行进行修改之前，会先为表添加意向互斥锁（IX），再为行记录添加互斥锁（X），在这时如果有人尝试对全表进行修改就不需要判断表中的每一行数据是否被加锁了，只需要通过等待意向互斥锁被释放就可以了。")])]),_._v(" "),t("p",[_._v("最后需要注意的是，当我们添加行锁的时候，意向锁是被自动添加的。")]),_._v(" "),t("h3",{attrs:{id:"_3-4-innodb中锁的算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-innodb中锁的算法"}},[_._v("#")]),_._v(" 3.4 InnoDB中锁的算法")]),_._v(" "),t("h4",{attrs:{id:"record-lock-记录锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#record-lock-记录锁"}},[_._v("#")]),_._v(" Record Lock 记录锁")]),_._v(" "),t("p",[_._v("记录锁锁定的是索引记录。")]),_._v(" "),t("p",[_._v("【何时无法加行锁，并锁定整个表？】")]),_._v(" "),t("h4",{attrs:{id:"gap-lock-间隙锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gap-lock-间隙锁"}},[_._v("#")]),_._v(" gap Lock 间隙锁")]),_._v(" "),t("p",[_._v("间隙锁锁定的是一个范围的索引记录，是用的最多的锁。")]),_._v(" "),t("h4",{attrs:{id:"next-key-lock-临键锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#next-key-lock-临键锁"}},[_._v("#")]),_._v(" Next-Key Lock 临键锁")]),_._v(" "),t("p",[_._v("Next-Key Lock是记录锁和间隙锁的结合，它锁定的是当前key所在的范围以及这个范围后的下一个范围。")]),_._v(" "),t("p",[_._v("【Next-Key Lock如何解决幻读问题？】")]),_._v(" "),t("h3",{attrs:{id:"_3-5-一致性非锁定读与一致性锁定读-涉及mvcc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-一致性非锁定读与一致性锁定读-涉及mvcc"}},[_._v("#")]),_._v(" 3.5 一致性非锁定读与一致性锁定读（涉及MVCC）")]),_._v(" "),t("p",[t("strong",[_._v("一致性非锁定读")]),_._v("是利用MVCC实现的读取方式。读取操作不需要等待锁的释放，可是可以读取目标行的历史版本（即快照数据）。"),t("strong",[_._v("这是InnoDB引擎的默认读取方式。")])]),_._v(" "),t("p",[_._v("快照数据是通过undo log完成的，一个行有不止一个快照数据，称这种技术为「行多版本技术」，由此带来的并发控制则称之为「多版本并发控制（MVCC）」。")]),_._v(" "),t("p",[_._v("对应上隔离级别，在READ COMMITTED和REPEATABLE READ下，InnoDB引擎使用的是一致性非锁定读。但是却有所不同。")]),_._v(" "),t("ul",[t("li",[_._v("READ COMMITTED下，读到的是最新一份的快照数据。")]),_._v(" "),t("li",[_._v("REPEATABLE READ下，读取到的是"),t("strong",[_._v("事务开始时候的行版本数据（也就是多次读到的都是这一份，保证了可重复读）")]),_._v("。")])]),_._v(" "),t("p",[t("strong",[_._v("一致性锁定读")]),_._v("则是为了某些逻辑一致的要求。就是为了避免上面这种非锁定读，为了让读被阻塞而诞生的。")]),_._v(" "),t("p",[_._v("有两种语句支持一致性锁定读：")]),_._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("SELECT")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("FOR")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("UPDATE")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("SELECT")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("LOCK")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v("IN")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("SHARE")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("MODE")]),_._v("\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("p",[_._v("这两种情况下，前者会加一个X锁，后者加S锁。阻塞方式和前面讲的一样。注意这时候语句必须要在一个事务里，否则还是和一致性非锁定读一样会被直接读到数据。")]),_._v(" "),t("h3",{attrs:{id:"_3-6-死锁的发生与避免"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-死锁的发生与避免"}},[_._v("#")]),_._v(" 3.6 死锁的发生与避免")]),_._v(" "),t("p",[_._v("死锁的原因和操作系统中是一样的：两个或两个以上的事务在执行过程中，因争夺锁而造成的一种互相等待的现象。")]),_._v(" "),t("p",[_._v("解决死锁：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("最简单方式就是不要等待，一旦等待就回滚。")])]),_._v(" "),t("li",[t("p",[_._v("另一种方式就是设置超时机制。")])]),_._v(" "),t("li",[t("p",[_._v("除此之外还可以使用「等待图」的方式来检查死锁，这也是InnoDB采用的方式。")])])]),_._v(" "),t("h2",{attrs:{id:"_4-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-事务"}},[_._v("#")]),_._v(" 4. 事务")]),_._v(" "),t("h3",{attrs:{id:"_4-1-事务的概念与四大特性acid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-事务的概念与四大特性acid"}},[_._v("#")]),_._v(" 4.1 事务的概念与四大特性ACID")]),_._v(" "),t("p",[_._v("为了防止操作系统出现崩溃进而造成巨大问题，事务被引入了操作系统。")]),_._v(" "),t("p",[t("strong",[_._v("事务会把数据库从一种一致状态转换为另一种一致状态。要么整个转换成功，要么整个转换不保存（回滚到事务发生前的状态）。")])]),_._v(" "),t("p",[_._v("事务有四个特性：ACID")]),_._v(" "),t("p",[_._v("A（atomicity, 原子性）：原子性强调整个操作为一个不可分割的整体，要么进行完毕，要么不进行。")]),_._v(" "),t("p",[_._v("C（consistency, 一致性）：一致性强调的是规则，是说事务发生前后，数据都是符合规则的，是合法的，是满足所有约束的。")]),_._v(" "),t("p",[_._v("I（isolation, 隔离性）：隔离性也被称之为“并行控制”，“可串行化”，“锁”等，即第三节讲的锁机制实现了隔离性。")]),_._v(" "),t("p",[_._v("D（duranility, 持久性）：事务一旦提交，其影响就是永久的，即使宕机数据库也能将其恢复。这保证了数据库的高可靠性。")]),_._v(" "),t("h3",{attrs:{id:"_4-2-隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-隔离级别"}},[_._v("#")]),_._v(" 4.2 隔离级别")]),_._v(" "),t("p",[_._v("隔离级别有4种，概念并不难懂，只是起名字的人非要起那么难懂，它们分别是：")]),_._v(" "),t("ul",[t("li",[_._v("READ UNCOMMITED（读未提交）。意思就是，一个事务可以读到其他事务中未提交的数据。")]),_._v(" "),t("li",[_._v("READ COMMITED（读提交）。意思是，一个事务只能读到其他事务提交后的数据。")]),_._v(" "),t("li",[_._v("REPEATABLE READ（repeatable read，可重复读）。意思是，重复读的数据都一致（也就是不会重复读一个地方突然出现了不一致）。【InnoDB默认】")]),_._v(" "),t("li",[_._v("SERIALIZABLE（serializable，串行化）。彻底串行，最高隔离级别。")])]),_._v(" "),t("h3",{attrs:{id:"_4-3-几种特殊的-读-脏读-不可重复读-幻读-丢失更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-几种特殊的-读-脏读-不可重复读-幻读-丢失更新"}},[_._v("#")]),_._v(" 4.3 几种特殊的“读”（脏读，不可重复读，幻读，丢失更新）")]),_._v(" "),t("p",[_._v("又是几个概念：")]),_._v(" "),t("ul",[t("li",[_._v("脏读：读到了其他事务中未提交的数据。")]),_._v(" "),t("li",[_._v("不可重复读：和第三级隔离刚好相反的意思，也就是重复读的时候发现多次读取的行数据变了。"),t("strong",[_._v("注意这里强调的是特定的行，而不是某个范围。")])]),_._v(" "),t("li",[_._v("幻读：幻读的概念有些特殊，我总结为两种情况都算幻读，"),t("strong",[_._v("其主要偏重点是强调一个范围中被insert了新的行（这时与不可重复读的主要区别）")]),_._v("：\n"),t("ul",[t("li",[_._v("第一种，在隔离级别为READ COMMITED及以下时。（A事务）在"),t("strong",[_._v("一个范围中")]),_._v("读取记录时，另一个事务往这个范围中插入了新的记录，导致A事务读到了这些记录，好像之前的查询是幻觉一样。")]),_._v(" "),t("li",[_._v("第二种，在隔离级别为REPEATABLE时，（A事务）在一个范围中读取记录时，另一个事务"),t("strong",[_._v("往这个范围中")]),_._v("插入了新的记录，A再次读取时，由于可重复读隔离的原因，导致读到的还是原来的数据，但是A事务试图插入数据时，出现了key重复的问题。")])])]),_._v(" "),t("li",[_._v("丢失更新：是指一个事务的更新操作被另一个事务的更新操作覆盖。")])]),_._v(" "),t("p",[_._v("这里有两个小问题")]),_._v(" "),t("ol",[t("li",[_._v("第一个问题是不可重复读和幻读有很大的概念上重合，要注意区分。")]),_._v(" "),t("li",[_._v("丢失更新不容易发生，在任何隔离级别上都不会发生这种问题，但是实际上在多用户计算机系统环境下是有可能发生这个问题的。详见《内幕》P275")])]),_._v(" "),t("h3",{attrs:{id:"_4-4-事务的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-事务的实现"}},[_._v("#")]),_._v(" 4.4 事务的实现")]),_._v(" "),t("p",[_._v("事务的实现更多参考"),t("a",{attrs:{href:"https://draveness.me/mysql-transaction/",target:"_blank",rel:"noopener noreferrer"}},[_._v("这篇文章"),t("OutboundLink")],1),_._v("。")]),_._v(" "),t("p",[_._v("这里至少要能做到解释undo和redo的工作原理以及其解决的对应问题。")]),_._v(" "),t("h4",{attrs:{id:"关于undo-log回滚日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于undo-log回滚日志"}},[_._v("#")]),_._v(" 关于undo log回滚日志")]),_._v(" "),t("p",[_._v("undo log存储在磁盘中，是持久化的。它存储的是"),t("strong",[_._v("逻辑日志")]),_._v("，是和已经发生的命令相反的逻辑，例如insert对应delete等。")]),_._v(" "),t("h4",{attrs:{id:"关于redo-log重做日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于redo-log重做日志"}},[_._v("#")]),_._v(" 关于redo log重做日志")]),_._v(" "),t("p",[_._v("redo log有两种，一种是缓存中的redo log，另一种是磁盘中的redo log。"),t("strong",[_._v("它存储的是物理格式日志")]),_._v("，即哪一页被做了什么修改。相比于逻辑日志，物理格式日志的速度更快。"),t("strong",[_._v("redo log以512字节进行存储，因此保证了写入的原子性。")])]),_._v(" "),t("p",[_._v("关于恢复的时机：每次存储引擎启动时，无论数据库上次是否正常关闭，都会尝试进行恢复。（LSN是什么）")]),_._v(" "),t("p",[_._v("redo log缓存向redo log磁盘文件刷新的时机：事务提交时。因此没有被提交的事务实际上是不能恢复的，redo log能恢复的是内存中尚未更新到磁盘的数据库数据。也就是说，redo log刷新的频率是比数据库数据高的，这样redo log才能起到作用。")]),_._v(" "),t("p",[_._v("【一个问题：redo可以回滚吗，undo可以重做吗？】")]),_._v(" "),t("p",[_._v("答：回滚日志可以重做（undo可以持久化），重做的过程当然可以回滚了。")]),_._v(" "),t("p",[_._v("【undo log和bin log的区别】")])])}),[],!1,null,null,null);v.default=s.exports}}]);